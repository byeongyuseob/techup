version: '3.8'

services:
  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    ports:
      - "80:80"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - nginx
    networks:
      - webnet

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ./web:/var/www/html
    environment:
      - NFS_SERVER_IP=${NFS_SERVER_IP}
      - NFS_EXPORT_PATH=${NFS_EXPORT_PATH}
    privileged: true
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH
    networks:
      webnet:
        aliases:
          - nginx-backend

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: naver123
      MYSQL_DATABASE: testdb
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - webnet

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - webnet

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - webnet

  alert-webhook:
    image: python:3.9-slim
    container_name: alert-webhook
    ports:
      - "5001:5001"
    volumes:
      - ./alert-webhook.py:/app/alert-webhook.py:ro
    command: bash -c "cd /app && pip install flask && python alert-webhook.py"
    networks:
      - webnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=naver123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      - webnet
    depends_on:
      - prometheus

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '--nginx.scrape-uri=http://haproxy/nginx_status'
    depends_on:
      - nginx
      - haproxy
    networks:
      - webnet

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - webnet

  multi-exporter:
    image: python:3.9-alpine
    container_name: multi-exporter
    ports:
      - "9150:9150"
      - "9170:9170"
    volumes:
      - ./docker-stats-exporter.py:/app/docker-stats-exporter.py:ro
      - ./multi-exporter.py:/app/multi-exporter.py:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: sh -c "apk add --no-cache docker-cli nfs-utils && pip install requests docker && (python /app/docker-stats-exporter.py &) && (python /app/multi-exporter.py &) && tail -f /dev/null"
    restart: unless-stopped
    networks:
      - webnet
    depends_on:
      - mysql
      - haproxy

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - webnet

volumes:
  grafana_data:
  portainer_data:

networks:
  webnet:
    driver: bridge
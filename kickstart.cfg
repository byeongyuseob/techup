# ================================================
# 폐쇄망 Kickstart 자동 설치 설정
# CentOS/RHEL 7,8,9 / Rocky Linux 8,9
# ================================================

# 시스템 설정
install
text
lang ko_KR.UTF-8
keyboard kr
timezone Asia/Seoul --isUtc --nontp

# 네트워크 설정
network --bootproto=dhcp --device=eth0 --onboot=yes --noipv6 --activate
network --hostname=docker-server

# 보안 설정
auth --enableshadow --passalgo=sha512
rootpw --plaintext naver123
firewall --disabled
selinux --disabled

# 부트로더 설정
bootloader --location=mbr --boot-drive=sda
zerombr
clearpart --all --initlabel --drives=sda

# 디스크 파티션 설정 (LVM 사용)
part /boot --fstype=xfs --size=1024 --ondisk=sda
part pv.01 --fstype=lvmpv --size=1 --grow --ondisk=sda

volgroup vg_system --pesize=4096 pv.01
logvol / --fstype=xfs --name=lv_root --vgname=vg_system --size=20480
logvol /var --fstype=xfs --name=lv_var --vgname=vg_system --size=40960
logvol /var/lib/docker --fstype=xfs --name=lv_docker --vgname=vg_system --size=102400
logvol /home --fstype=xfs --name=lv_home --vgname=vg_system --size=10240
logvol swap --fstype=swap --name=lv_swap --vgname=vg_system --size=8192

# 패키지 선택
%packages
@^minimal
@core
@development

# 필수 시스템 패키지
kernel
kernel-devel
kernel-headers
grub2
chrony
bash
bash-completion
sudo
openssh-server
openssh-clients
rsync
tar
gzip
bzip2
xz
unzip
zip
wget
curl
net-tools
bind-utils
telnet
nmap-ncat
traceroute
mtr
tcpdump
iptables
iptables-services
vim-enhanced
nano
git
tree
htop
iotop
sysstat
lsof
strace
psmisc
bc
jq
dos2unix

# 개발 도구
gcc
gcc-c++
make
cmake
autoconf
automake
libtool
patch
pkgconfig
gettext
flex
bison
gdb

# 라이브러리
glibc-devel
openssl
openssl-devel
openssl-libs
zlib-devel
libselinux-devel
readline-devel
ncurses-devel
pcre-devel
expat-devel
libxml2-devel
libxslt-devel
libcurl-devel

# Python 환경
python3
python3-devel
python3-pip
python3-setuptools
python3-libs

# 파일시스템 도구
xfsprogs
e2fsprogs
lvm2
device-mapper-persistent-data
parted
gdisk

# NFS 관련
nfs-utils
rpcbind
libnfsidmap
nfs4-acl-tools

# 모니터링 도구
dstat
atop
nmon
collectl
procps-ng
net-snmp-utils

# 기타 유틸리티
tmux
screen
socat
nc
expect
dialog
pv
colordiff
multitail
logrotate
crontabs
at

# SELinux 관련 (비활성화하더라도 필요)
selinux-policy
selinux-policy-targeted
policycoreutils

# YUM 관련
yum-utils
yum-plugin-versionlock
createrepo
deltarpm

# 시스템 관리
systemd
systemd-sysv
systemd-libs
dbus
acpid
irqbalance
microcode_ctl
numactl
tuned

# 제외 패키지
-firewalld
-NetworkManager
-NetworkManager-libnm
-NetworkManager-team
-NetworkManager-tui
-NetworkManager-wifi
-plymouth
-iwl*-firmware
-ivtv-firmware

%end

# Pre 설치 스크립트
%pre
#!/bin/bash
# 디스크 초기화
dd if=/dev/zero of=/dev/sda bs=512 count=1
%end

# Post 설치 스크립트
%post --log=/root/kickstart-post.log
#!/bin/bash

echo "========================================" | tee -a /root/install.log
echo "    Kickstart Post 설치 스크립트 시작" | tee -a /root/install.log
echo "========================================" | tee -a /root/install.log

# 1. 기본 디렉토리 생성
mkdir -p /root/workspace
mkdir -p /root/scripts
mkdir -p /var/lib/docker
mkdir -p /etc/docker

# 2. 시스템 최적화 설정
cat >> /etc/sysctl.conf << 'EOF'

# Docker & Web Server Optimization
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.ip_local_port_range = 10000 65000
net.core.somaxconn = 8192
net.core.netdev_max_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 2000000
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
fs.file-max = 2097152
fs.nr_open = 1048576
fs.inotify.max_user_watches = 524288
vm.swappiness = 10
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5
vm.overcommit_memory = 1
EOF

# 3. ulimit 설정
cat >> /etc/security/limits.conf << 'EOF'

* soft nofile 65535
* hard nofile 65535
* soft nproc 65535
* hard nproc 65535
* soft memlock unlimited
* hard memlock unlimited
root soft nofile 65535
root hard nofile 65535
root soft nproc 65535
root hard nproc 65535
EOF

# 4. Docker 저장소 설정 (오프라인용)
cat > /etc/yum.repos.d/docker-ce.repo << 'EOF'
[docker-ce-stable]
name=Docker CE Stable
baseurl=file:///mnt/cdrom/docker
enabled=1
gpgcheck=0
EOF

# 5. 로컬 YUM 저장소 설정
cat > /etc/yum.repos.d/local.repo << 'EOF'
[local-base]
name=Local Base Repository
baseurl=file:///mnt/cdrom/BaseOS
enabled=1
gpgcheck=0

[local-appstream]
name=Local AppStream Repository
baseurl=file:///mnt/cdrom/AppStream
enabled=1
gpgcheck=0

[local-extras]
name=Local Extras Repository
baseurl=file:///mnt/cdrom/extras
enabled=1
gpgcheck=0
EOF

# 6. Docker 설치 스크립트 생성
cat > /root/scripts/install-docker.sh << 'DOCKERSCRIPT'
#!/bin/bash

# Docker 오프라인 설치
echo "Docker 설치 시작..."

# RPM 패키지 설치 (Kickstart 서버에서 제공)
cd /mnt/cdrom/docker
yum localinstall -y *.rpm

# Docker 설정
mkdir -p /etc/docker
cat > /etc/docker/daemon.json << 'EOF'
{
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "100m",
        "max-file": "3"
    },
    "storage-driver": "overlay2",
    "storage-opts": ["overlay2.override_kernel_check=true"],
    "exec-opts": ["native.cgroupdriver=systemd"],
    "insecure-registries": ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"],
    "live-restore": true,
    "default-ulimits": {
        "nofile": {
            "Name": "nofile",
            "Hard": 65536,
            "Soft": 65536
        }
    }
}
EOF

# Docker 서비스 활성화
systemctl daemon-reload
systemctl enable docker
systemctl start docker

echo "Docker 설치 완료!"
DOCKERSCRIPT

chmod +x /root/scripts/install-docker.sh

# 7. Docker Compose 설치 스크립트
cat > /root/scripts/install-compose.sh << 'COMPOSESCRIPT'
#!/bin/bash

# Docker Compose 바이너리 설치 (Kickstart 서버에서 제공)
cp /mnt/cdrom/docker-compose/docker-compose /usr/local/bin/
chmod +x /usr/local/bin/docker-compose
ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

echo "Docker Compose 설치 완료!"
COMPOSESCRIPT

chmod +x /root/scripts/install-compose.sh

# 8. 프로젝트 설정 스크립트
cat > /root/scripts/setup-project.sh << 'PROJECTSCRIPT'
#!/bin/bash

# 프로젝트 파일 복사 (Kickstart 서버에서)
cp -r /mnt/cdrom/workspace /root/
cd /root/workspace

# 권한 설정
chmod +x *.sh

# Docker 이미지 로드
if [ -f /mnt/cdrom/docker-images.tar ]; then
    echo "Docker 이미지 로드 중..."
    docker load -i /mnt/cdrom/docker-images.tar
fi

# NFS 설정
echo "10.95.137.5 nfs-server" >> /etc/hosts

# 서비스 파일 생성
cat > /etc/systemd/system/docker-stack.service << 'EOF'
[Unit]
Description=Docker Stack Services
After=docker.service network-online.target
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/root/workspace
ExecStart=/usr/bin/docker compose up -d --scale nginx=2
ExecStop=/usr/bin/docker compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/auto-scaler.service << 'EOF'
[Unit]
Description=Docker Auto Scaler
After=docker-stack.service
Requires=docker-stack.service

[Service]
Type=simple
WorkingDirectory=/root/workspace
ExecStart=/root/workspace/auto-scaler.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable docker-stack
systemctl enable auto-scaler

echo "프로젝트 설정 완료!"
PROJECTSCRIPT

chmod +x /root/scripts/setup-project.sh

# 9. 자동 실행 스크립트
cat > /etc/rc.d/rc.local << 'EOF'
#!/bin/bash
# 부팅 후 자동 실행

# 로그
exec 1> >(logger -t rc.local -p local0.info)
exec 2> >(logger -t rc.local -p local0.err)

echo "시작: $(date)"

# Docker 확인 및 시작
sleep 30
if ! systemctl is-active --quiet docker; then
    systemctl start docker
fi

# 컨테이너 시작
if [ -d /root/workspace ]; then
    cd /root/workspace
    /usr/bin/docker compose up -d --scale nginx=2 || true
    nohup /root/workspace/auto-scaler.sh > /var/log/auto-scaler.log 2>&1 &
fi

echo "완료: $(date)"
exit 0
EOF

chmod +x /etc/rc.d/rc.local

# 10. 서비스 비활성화
systemctl disable firewalld
systemctl disable NetworkManager
systemctl stop firewalld
systemctl stop NetworkManager

# 11. 필요 서비스 활성화
systemctl enable sshd
systemctl enable crond
systemctl enable rsyslog
systemctl enable rc-local

# 12. Python 패키지 설치 (오프라인)
if [ -d /mnt/cdrom/python-packages ]; then
    cd /mnt/cdrom/python-packages
    pip3 install --no-index --find-links . flask requests pyyaml aiohttp
fi

# 13. 완료 메시지
cat > /root/SETUP_COMPLETE.txt << 'EOF'
========================================
    Kickstart 설치 완료!
========================================

1. Docker 설치:
   /root/scripts/install-docker.sh

2. Docker Compose 설치:
   /root/scripts/install-compose.sh

3. 프로젝트 설정:
   /root/scripts/setup-project.sh

4. 서비스 시작:
   cd /root/workspace
   docker compose up -d --scale nginx=2

5. 접속 정보:
   - 웹: http://서버IP
   - Grafana: http://서버IP:3000 (admin/naver123)
   - HAProxy: http://서버IP/haproxy-stats (admin/naver123)

모든 비밀번호: naver123
========================================
EOF

echo "Kickstart Post 설치 완료!" | tee -a /root/install.log

%end

# 재부팅
reboot --eject